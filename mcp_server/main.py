# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:04:00+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query

from models import (
    SubscriptionsRecurrenceIdItemsPostRequest,
    SubscriptionsRecurrenceIdReindexPatchRequest,
    UpdatepartialrecurrenceRequest,
    UpdaterecurrenceRequest,
    UpdaterecurrencesettingsRequest,
)

app = MCPProxy(
    contact={},
    description='',
    title='Subscription (v1 - deprecated)',
    version='1.0',
    servers=[
        {'url': 'https://vtex.local'},
        {
            'description': 'VTEX server url',
            'url': 'https://{accountName}.{environment}.com.br/api',
            'variables': {
                'accountName': {
                    'default': '{accountName}',
                    'description': 'Name of the VTEX account. Used as part of the URL',
                },
                'environment': {
                    'default': '{environment}',
                    'description': 'Environment to use. Used as part of the URL.',
                },
            },
        },
    ],
)


@app.get(
    '/subscriptions',
    description=""" Retrieves a given Subscription (formerly recurrence). There are three options of filtering your Subscruptions v1. It's possible to get a list of all Subscriptions v1, by not adding any query params to your request, and simply executing a call to the url. It is also possible to list the Subscriptions by email, filtering by the email query param. And finnally, it is possible to list recurrences with failures on the last execution cycle, filtering by the cycleStatus query param. """,
    tags=['subscription_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_recurrencebyemail(
    email: Optional[str] = None,
    cycle_status: Optional[str] = Query(None, alias='cycleStatus'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get Subscriptions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/subscriptions',
    description=""" Updates details of a given Subscription (formerly recurrence). """,
    tags=['subscription_management', 'subscription_recurrence_settings'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def updaterecurrence(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: UpdaterecurrenceRequest = ...,
):
    """
    Update Subscription
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions/me',
    description=""" Lists details of your self Subscription (formerly Recurrence). """,
    tags=['subscription_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getselfrecurrence(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get self Subscription
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions/settings',
    description=""" Retrieves your store's Subscriptions' (formerly recurrence) settings. """,
    tags=['subscription_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getrecurrencesettings(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get Subscription settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/subscriptions/settings',
    description=""" Updates the Subscriptions' (formerly Recurrence) settings of your store by salesChannel and defaultSLA. """,
    tags=['subscription_management', 'subscription_recurrence_settings'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def updaterecurrencesettings(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: UpdaterecurrencesettingsRequest = ...,
):
    """
    Update Subscription settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions/{recurrenceId}',
    description=""" Retrieves a given Subscription (formerly recurrence) by recurrenceId. """,
    tags=['subscription_recurrence_settings', 'subscription_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_recurrencebyrecurrence_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    recurrence_id: str = Path(..., alias='recurrenceId'),
):
    """
    Get Subscription by recurrenceId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/subscriptions/{recurrenceId}',
    description=""" Updates partial information of a given subscription (formerly Recurrence). """,
    tags=['subscription_recurrence_settings'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def updatepartialrecurrence(
    recurrence_id: str = Path(..., alias='recurrenceId'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: UpdatepartialrecurrenceRequest = ...,
):
    """
    Update partial Subscription
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions/{recurrenceId}/addresses',
    description=""" Retrieves the addresses attached to a given subscription (formerly recurrence) by recurrenceId. """,
    tags=['subscription_address_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getrecurrenceaddresses(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    recurrence_id: str = Path(..., alias='recurrenceId'),
):
    """
    Get Subscription addresses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/subscriptions/{recurrenceId}/items',
    description=""" Adds an item to a Subscription (formerly Recurrence). """,
    tags=['subscription_item_management', 'subscription_recurrence_settings'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def addrecurrenceitem(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    recurrence_id: str = Path(..., alias='recurrenceId'),
    body: SubscriptionsRecurrenceIdItemsPostRequest = ...,
):
    """
    Add Subscription item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/subscriptions/{recurrenceId}/reindex',
    description=""" Alters the frequency of a given Subscription (formerly Recurrence) by changing period and interval. """,
    tags=['subscription_recurrence_settings', 'subscription_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def reindexrecurrence(
    recurrence_id: str = Path(..., alias='recurrenceId'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: SubscriptionsRecurrenceIdReindexPatchRequest = ...,
):
    """
    Reindex Subscription
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions/{recurrenceid}/accounts',
    description=""" Lists payment accounts of a given Subscription (formerly Recurrence) by recurrenceId. """,
    tags=['payment_account_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getpaymentaccounts(
    recurrenceid: str,
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get payment accounts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
